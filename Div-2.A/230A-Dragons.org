#+title: Dragons

Kirito is stuck on a level of the MMORPG he is playing now. To move on in the game, he's got to defeat all n dragons that live on this level. Kirito and the dragons have strength, which is represented by an integer. In the duel between two opponents the duel's outcome is determined by their strength. Initially, Kirito's strength equals s.

If Kirito starts duelling with the i-th (1 ≤ i ≤ n) dragon and Kirito's strength is not greater than the dragon's strength xi, then Kirito loses the duel and dies. But if Kirito's strength is greater than the dragon's strength, then he defeats the dragon and gets a bonus strength increase by yi.

Kirito can fight the dragons in any order. Determine whether he can move on to the next level of the game, that is, defeat all dragons without a single loss.

*Input*

The first line contains two space-separated integers s and n (1 ≤ s ≤ 104, 1 ≤ n ≤ 103). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 ≤ xi ≤ 104, 0 ≤ yi ≤ 104) — the i-th dragon's strength and the bonus for defeating it.

*Output*

The first line contains four space-separated x1, y1, x2, y2 ( - 100 ≤ x1, y1, x2, y2 ≤ 100) integers, where x1 and y1 are coordinates of the first tree and x2 and y2 are coordinates of the second tree. It's guaranteed that the given points are distinct.

*Examples*

*Input*

#+begin_src txt
2 2
1 99
100 0
#+end_src

*Output*

#+begin_src txt
YES
#+end_src

#+begin_src txt
10 1
100 100
#+end_src

*Output*

#+begin_src txt
NO
#+end_src

#+begin_quote
*Note*

In the first sample Kirito's strength initially equals 2. As the first dragon's strength is less than 2, Kirito can fight it and defeat it. After that he gets the bonus and his strength increases to 2 + 99 = 101. Now he can defeat the second dragon and move on to the next level.

In the second sample Kirito's strength is too small to defeat the only dragon and win.
#+end_quote

*CPP CODE*

#+BEGIN_SRC CPP
#include <bits/stdc++.h>
#define mem(array, num) memset(array, num, sizeof(array))
using namespace std;
int main() {
  long int x, c, i, j, s, n, array, num;
  pair<int, int> a[1000];
  while (cin >> s >> n) {
    c = 1;
    for (i = 0; i < n; i++) {
      cin >> a[i].first >> a[i].second;
    }
    sort(a, a + n);
    for (i = 0; i < n; i++) {
      if (s <= a[i].first) {
        c = 0;
        break;
      } else {
        s = s + a[i].second;
      }
    }
    if (c == 0)
      cout << "NO\n";
    else
      cout << "YES\n";
  }
  return 0;
}
#+END_SRC
