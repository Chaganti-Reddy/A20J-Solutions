#+title: Reconnaissance 2

n soldiers stand in a circle. For each soldier his height ai is known. A reconnaissance unit can be made of such two *neighbouring* soldiers, whose heights difference is minimal, i.e. |ai - aj| is minimal. So each of them will be less noticeable with the other. Output any pair of soldiers that can form a reconnaissance unit.

*Input*

The first line contains integer n (2 ≤ n ≤ 100) — amount of soldiers. Then follow the heights of the soldiers in their order in the circle — n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000). The soldier heights are given in clockwise or counterclockwise direction.

*Output*

Output two integers — indexes of *neighbouring* soldiers, who should form a reconnaissance unit. If there are many optimum solutions, output any of them. Remember, that the soldiers stand in a circle.

*Examples*

*Input*

#+begin_src txt
5
10 12 13 15 10
#+end_src

*Output*

#+begin_src txt
5 1
#+end_src

*Input*

#+begin_src txt
4
10 20 30 40
#+end_src

*Output*

#+begin_src txt
1 2
#+end_src

*CPP CODE*

#+BEGIN_SRC C++
#include <bits/stdc++.h>
#include <climits>
using namespace std;

int main() {
  int n, l = 0, r = 0;
  cin >> n;
  int a[n];
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  int diff = INT_MAX;
  for (int i = 0; i < n - 1; ++i) {
    if (diff >= abs(a[i + 1] - a[i])) {
      r = i + 2;
      l = i + 1;
      diff = abs(a[i + 1] - a[i]);
    }
  }
  if (diff >= abs(a[n - 1] - a[0])) {
    l = n;
    r = 1;
    diff = abs(a[n - 1] - a[0]);
  }
  cout << l << " " << r << "\n";
}
#+END_SRC
